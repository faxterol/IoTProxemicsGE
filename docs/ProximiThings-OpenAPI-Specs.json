{
  "swagger": "2.0",
  "info": {
    "description": "ProximiThings Server is a FIWARE-enabled component to processing proxemics interaction on Internet of Things environments. ",
    "version": "1.0.0",
    "title": "ProximiThings Server",
    "termsOfService": "",
    "contact": {
      "email": "lcardenas@cicese.edu.mx"
    },
    "license": {
      "name": "Affero General Public License (GPL) version 3.",
      "url": "https://github.com/faxterol/ProximiThings-Server/blob/master/README.md"
    }
  },
  "host": "proximithings-server.dev",
  "basePath": "/v1",
  "tags": [
    {
      "name": "RulesInteraction",
      "description": "Operations for RulesInteraction to activate devices"
    },
    {
      "name": "ProxemicsActions",
      "description": "Actions to execute on devices when RulesInteraction apply or not."
    },
    {
      "name": "Entities",
      "description": "Entities using ProximiThings."
    },
    {
      "name": "ProxemicsHistory",
      "description": "History of ProxemicsInteraction."
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/entities": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get all entities using ProximiThings",
        "description": "Get all entities on ProximiThings",
        "operationId": "getEntities",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Entities"
        ],
        "summary": "Create a new entity on ProximiThings",
        "description": "Create a new Entity on ProximiThings. Use only required parameters.",
        "operationId": "createEntity",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Entity object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Entity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/entities/{EntityId}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get Entity by EntityId",
        "description": "Get all information about entity using EntityId",
        "operationId": "getEntity",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "EntityId",
            "in": "path",
            "description": "EntityId from entity on database (_id parameter)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Entities"
        ],
        "summary": "Update entity on ProximiThings",
        "description": "Update information from entity. Use only required parameters.",
        "operationId": "updateEntity",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "EntityId",
            "in": "path",
            "description": "EntityId from entity on database (_id parameter)",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Entity object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Entity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/rules": {
      "get": {
        "tags": [
          "RulesInteraction"
        ],
        "summary": "Get all rules interaction",
        "description": "Get all rules interaction existing on the system",
        "operationId": "getRules",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "RulesInteraction"
        ],
        "summary": "Add a new set of rules interaction",
        "description": "Add a new set of rules interaction for two entities using proxemics dimensiones measurements. If rules apply not not, you can execute a proxemics action.",
        "operationId": "addRules",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "RuleInteraction object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RuleInteraction"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/rules/{RuleId}": {
      "post": {
        "tags": [
          "RulesInteraction"
        ],
        "summary": "Update an existing RuleInteraction",
        "description": "Update a set of rules interaction.",
        "operationId": "updateRules",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "RuleId",
            "in": "path",
            "description": "RuleInteraction id to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "RuleInteraction object with parameters to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RuleInteraction"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated OK"
          },
          "404": {
            "description": "RuleInteraction not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "get": {
        "tags": [
          "RulesInteraction"
        ],
        "summary": "Find a set of RuleInteraction by ID",
        "description": "Returns a single RuleInteraction",
        "operationId": "getRulesById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "RuleId",
            "in": "path",
            "description": "RuleInteraction id to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RuleInteraction"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "RuleInteraction not found"
          }
        }
      },
      "delete": {
        "tags": [
          "RulesInteraction"
        ],
        "summary": "Deletes a RuleInteraction",
        "description": "",
        "operationId": "deleteRule",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "RuleId",
            "in": "path",
            "description": "RuleInteraction id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "RuleInteraction not found"
          }
        }
      }
    },
    "/actions": {
      "get": {
        "tags": [
          "ProxemicsActions"
        ],
        "summary": "Get all rules interaction",
        "description": "Get all rules interaction existing on the system",
        "operationId": "getActions",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "ProxemicsActions"
        ],
        "summary": "Add a new action",
        "description": "Add a new action to execute on RulesInteraction.",
        "operationId": "addActions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ProxemicsAction object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxemicsAction"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/actions/{ActionId}": {
      "post": {
        "tags": [
          "ProxemicsActions"
        ],
        "summary": "Update an existing ProxemicsAction",
        "description": "Update an ProxemicsAction",
        "operationId": "updateAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ActionId",
            "in": "path",
            "type": "string",
            "description": "ProxemicsAction ID",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "ProxemicsAction object with parameters to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxemicsAction"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated OK"
          },
          "404": {
            "description": "ProxemicsAction not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "get": {
        "tags": [
          "ProxemicsActions"
        ],
        "summary": "Find a ProxemicsAction by ID",
        "description": "Returns a single ProxemicsAction",
        "operationId": "getActionsById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ActionId",
            "in": "path",
            "type": "string",
            "description": "ProxemicsAction ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProxemicsAction"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "RuleInteraction not found"
          }
        }
      },
      "delete": {
        "tags": [
          "ProxemicsActions"
        ],
        "summary": "Delete a ProxemicsAction",
        "description": "",
        "operationId": "deleteAction",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ActionId",
            "in": "path",
            "type": "string",
            "description": "ProxemicsAction ID",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ProxemicsAction not found"
          }
        }
      }
    },
    "/proxemics-history": {
      "get": {
        "tags": [
          "ProxemicsHistory"
        ],
        "summary": "Get all proxemics dimensions values",
        "description": "Get all proxemics dimensions values order by date and time",
        "operationId": "getProxemicsHistory",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "EntityId",
            "in": "query",
            "type": "string",
            "description": "ID on Entity"
          },
          {
            "name": "date",
            "in": "query",
            "type": "string",
            "description": "Set a day to get proxemics dimensions value in format YYYY-MM-DD"
          }  
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type" : "array",
              "items" : {
                "$ref": "#/definitions/ProxemicsHistory"
              }
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {},
  "definitions": {
    "RuleInteraction": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "RuleId generated by database engine (MongoDB)"
        },
        "name": {
          "type": "string",
          "description": "Name of rule interaction on snake_case format"
        },
        "description": {
          "type": "string",
          "description": "A rapid description of rule interaction"
        },
        "entities": {
          "type": "array",
          "description": "Must have only two entities rules definitions on array. (on the future, it will be enabled to more entities)",
          "items": {
            "properties": {
              "entity_id": {
                "type": "string",
                "description": "The entity id used on Orion Context Broker"
              },
              "proxemics_rules": {
                "type": "object",
                "description": "Define your proxemics rules to match a proxemics interaction",
                "properties": {
                  "zone": {
                    "type": "string",
                    "description": "You can use multiple zone interaction for entity. You can set a prefix IN: or OUT: to specify if entity is in or is out of the proxemics zone. Multiple proxemics zone can be set by comma-separated. (Examples 'OUT:INTIMATE,PERSONAL' 'IN:PUBLIC,SOCIAL')"
                  },
                  "orientation": {
                    "type": "string",
                    "description": "Orientation of other entity. example: FRONT_OF:Another_entity|RIGHT_OF:Another_entity. In this example, entity can be on front or right side."
                  },
                  "movement": {
                    "type": "string",
                    "enum": [
                      "IDLE",
                      "IN_MOVEMENT"
                    ]
                  },
                  "interaction_phase": {
                    "type": "string",
                    "enum": [
                      "PERSONAL",
                      "SUBTLE",
                      "IMPLICIT",
                      "AMBIENT"
                    ],
                    "description": "interaction phase with respect to another entity."
                  },
                  "location": {
                    "type": "string",
                    "description": "You can use multiple location for entity. Like zone proxemic, you can use the prefix IN and OUT if entity must be in or out location. Location is the entity id on Orion Context Broker."
                  }
                }
              }
            }
          }
        },
        "commands_rules_apply": {
          "type": "array",
          "description": "Array of commands to execute when proxemics rules match with proxemics interaction.",
          "items": {
            "properties": {
              "command": {
                "type": "string",
                "description": "Command to execute on proxemics action."
              },
              "entity_id": {
                "type": "string",
                "description": "The entity id that execute this command. If you have commands with same name, the system will use the command for the entity id."
              }
            }
          }
        },
        "commands_rules_not_apply": {
          "type": "array",
          "description": "Array of commands to execute when proxemics rules not match with proxemics interaction.",
          "items": {
            "properties": {
              "command": {
                "type": "string",
                "description": "Command to execute on proxemics action."
              },
              "entity_id": {
                "type": "string",
                "description": "The entity id that execute this command. If you have commands with same name, the system will use the command for the entity id."
              }
            }
          }
        }
      },
      "required": [
        "name",
        "description",
        "entities"
      ]
    },
    "ProxemicsAction": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "ActionId generated by database engine (MongoDB)"
        },
        "identifier": {
          "type": "string",
          "description": "A short name of action in snake_case. This is used on RuleInteraction like command name to execute when proxemics is match."
        },
        "name": {
          "type": "string",
          "description": "Name of proxemics_action on snake_case format"
        },
        "description": {
          "type": "string",
          "description": "A rapid description of proxemics action"
        },
        "type_action": {
          "type": "string",
          "description": "The action to execute.",
          "enum": [
            "mqtt_msg",
            "http_callback"
          ]
        },
        "action": {
          "type": "object",
          "properties": {
            "publish_message": {
              "type": "string",
              "description": "Message to send to device when action is execute using MQTT Protocol. When type_action is http_callback, this is the JSON to send to HTTP request."
            },
            "publish_path": {
              "type": "string",
              "description": "Topic to send mqtt message"
            },
            "url": {
              "type": "string",
              "description": "URL to call when action is execute"
            }
          }
        }
      }
    },
    "Entity": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "EntityID generated by database engine (MongoDB)"
        },
        "name": {
          "type": "string",
          "description": "A name for entity."
        },
        "entity_id": {
          "type": "string",
          "description": "entity_id parameter from Orion Context Broker."
        },
        "entity_type": {
          "type": "string",
          "description": "entity_type parameter from Orion Context Broker"
        },
        "service_path": {
          "type": "string",
          "description": "service_path used on Orion Context Broker"
        },
        "description": {
          "type": "string",
          "description": "A rapid description of proxemics action"
        },
        "proxemics_data_previous": {
          "type": "object",
          "description": "Same structure of proxemics_data."
        },
        "proxemics_data": {
          "type": "object",
          "description": "Proxemics Dimensions processed",
          "properties": {
            "zone": {
              "type": "string",
              "description": "Proxemics Zone processed of the entity",
              "enum": [
                "INTIMATE",
                "PERSONAL",
                "SOCIAL",
                "PUBLIC"
              ]
            },
            "distance_cm": {
              "type": "integer",
              "description": "Distance processed on centimeters from device"
            },
            "movement": {
              "type": "string",
              "description": "Movement of entity",
              "enum": [
                "IN_MOVEMENT",
                "IDLE"
              ]
            },
            "orientation": {
              "type": "object",
              "description": "Orientation of devices on every direction",
              "properties": {
                "in_right_of": {
                  "type": "array",
                  "description": "Array of entities (using entity_id) on the right side.",
                  "items": {
                    "type": "string"
                  }
                },
                "in_left_of": {
                  "type": "array",
                  "description": "Array of entities (using entity_id) on the left side.",
                  "items": {
                    "type": "string"
                  }
                },
                "in_front_of": {
                  "type": "array",
                  "description": "Array of entities (using entity_id) on the front side.",
                  "items": {
                    "type": "string"
                  }
                },
                "in_back_of": {
                  "type": "array",
                  "description": "Array of entities (using entity_id) on the back side.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "orientation_degrees": {
              "type": "integer",
              "description": "Degrees of orientation using sexagesimal units. "
            },
            "location_id": {
              "type": "string",
              "description": "entity_id of location from OCB"
            },
            "interaction_phase": {
              "type": "array",
              "description": "array of entities with one interaction phase",
              "items": {
                "properties": {
                  "entity_id": {
                    "type": "string",
                    "description": "entity_id (from OCB) of entity in this phase."
                  },
                  "phase": {
                    "type": "string",
                    "description": "Interaction phase of this entity"
                  }
                }
              }
            }
          }
        },
        "last_notification": {
          "type": "object",
          "description": "Last notification received by Orion Context Broker. Object is described in key:value. OCB send this on key and value on parameters name and value from every attribute. (See OCB docs)"
        }
      },
      "required": [
        "name",
        "entity_id",
        "entity_type",
        "service_path"
      ]
    },
    "ProxemicsHistory": {
      "type": "object",
      "properties": {
        "entity": {
          "type": "string",
          "description": "Entity ID"
        },
        "date": {
          "type": "string",
          "description": "Date and time when proxemics dimensions was measured. "
        },
        "proxemics_data": {
          "type": "string",
          "description": "Proxemics data like Entity object"
        }
      }
    }
  },
  "externalDocs": {
    "description": "ProximiThings Repository",
    "url": "https://github.com/faxterol/ProximiThings-Server"
  }
}